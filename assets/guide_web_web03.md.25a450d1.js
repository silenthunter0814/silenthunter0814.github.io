import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8f76c11e.js";const u=JSON.parse('{"title":"Javascript 语言精粹","description":"JavaScript 语言精粹。javascript 课程课件，学习笔记。","frontmatter":{"description":"JavaScript 语言精粹。javascript 课程课件，学习笔记。","author":"silenthunter0814, Silent Hunter"},"headers":[],"relativePath":"guide/web/web03.md","filePath":"guide/web/web03.md","lastUpdated":1693623794000}'),p={name:"guide/web/web03.md"},e=l(`<h1 id="javascript-语言精粹" tabindex="-1">Javascript 语言精粹 <a class="header-anchor" href="#javascript-语言精粹" aria-label="Permalink to &quot;Javascript 语言精粹&quot;">​</a></h1><p>book: JavaScript: The Good Parts<br> authors: Douglas Crorkford</p><p>课程视频：</p><ul><li>油管: <a href="https://youtube.com/@silenthunter0814" target="_blank" rel="noreferrer">https://youtube.com/@silenthunter0814</a></li><li>B 站：<a href="https://space.bilibili.com/1551957972" target="_blank" rel="noreferrer">https://space.bilibili.com/1551957972</a></li></ul><hr><details><summary>章节目录</summary><nav class="table-of-contents"><ul><li><a href="#_1-语言精粹">1 语言精粹</a><ul><li><a href="#_1-1-为什么选择-javascript">1.1 为什么选择 JavaScript？</a></li><li><a href="#_1-2-分析-javascript">1.2 分析 JavaScript</a></li><li><a href="#_1-3-一个简单的测试场">1.3 一个简单的测试场</a></li></ul></li><li><a href="#_2-语法">2 语法</a><ul><li><a href="#_2-1-whitespace">2.1 Whitespace</a></li></ul></li></ul></nav></details><h2 id="_1-语言精粹" tabindex="-1">1 语言精粹 <a class="header-anchor" href="#_1-语言精粹" aria-label="Permalink to &quot;1 语言精粹&quot;">​</a></h2><h3 id="_1-1-为什么选择-javascript" tabindex="-1">1.1 为什么选择 JavaScript？ <a class="header-anchor" href="#_1-1-为什么选择-javascript" aria-label="Permalink to &quot;1.1 为什么选择 JavaScript？&quot;">​</a></h3><p>JavaScript 是网络浏览器的语言。 它与浏览器的联系使其成为世界上最流行的编程语言之一。</p><p>JavaScript 的神奇之处在于，即使不了解该语言，甚至不了解编程，也可以使用它完成工作。 它是一种具有巨大表达能力的语言。</p><h3 id="_1-2-分析-javascript" tabindex="-1">1.2 分析 JavaScript <a class="header-anchor" href="#_1-2-分析-javascript" aria-label="Permalink to &quot;1.2 分析 JavaScript&quot;">​</a></h3><p>JavaScript 是一种松散类型语言，因此 JavaScript 编译器无法检测类型错误。 对于从强类型语言转向 JavaScript 的人来说，这可能会令人震惊。 但事实证明，强类型并不能消除仔细测试的需要。</p><p>JavaScript 有一个非常强大的对象字面量表示法。</p><p>JavaScript 中一个有争议的特性是原型继承。</p><p>尽管 JavaScript 有缺陷，但它确实很好。 它重量轻且富有表现力。 一旦掌握了函数式编程的窍门，它就会变得非常有趣。</p><h3 id="_1-3-一个简单的测试场" tabindex="-1">1.3 一个简单的测试场 <a class="header-anchor" href="#_1-3-一个简单的测试场" aria-label="Permalink to &quot;1.3 一个简单的测试场&quot;">​</a></h3><p>创建一个名为 program.html 的 HTML 文件：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;program.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;program.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>&lt;pre&gt;</code> 元素表示预格式化文本，该文本将完全按照 HTML 文件中的写入方式呈现。 文本通常使用非比例或等宽字体呈现。 该元素内的空白按书写方式显示。</p><p>然后，在同一目录中创建一个名为 program.js 的文件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">writeln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">writeln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, world!&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，在浏览器中打开 HTML 文件以查看结果。</p><p>在整本书中，方法 <code>method</code> 用于定义新方法。 这是它的定义：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">func</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>将在第 4 章中进行解释。</p><h2 id="_2-语法" tabindex="-1">2 语法 <a class="header-anchor" href="#_2-语法" aria-label="Permalink to &quot;2 语法&quot;">​</a></h2><p>本章介绍了 JavaScript 优秀部分的语法，快速概述了该语言的结构。 我们将用铁路图来表示语法。</p><p>解释这些图的规则很简单：</p><ul><li>从左侧边缘开始，沿着轨道到达右侧边缘。</li><li>在进行过程中，您将遇到椭圆形中的文字以及矩形中的规则或描述。</li><li>任何可以通过跟踪轨道进行的序列都是合法的。</li><li>任何不能按照轨迹完成的序列都是不合法的。</li><li>两端各有一个条的铁路图允许在任意一对标记之间插入空格。 两端有两个条的铁路图则不然。</li></ul><p>本章中介绍的优秀部分的语法比整个语言的语法要简单得多。</p><h3 id="_2-1-whitespace" tabindex="-1">2.1 Whitespace <a class="header-anchor" href="#_2-1-whitespace" aria-label="Permalink to &quot;2.1 Whitespace&quot;">​</a></h3><p>空白可以采用格式化字符或注释的形式。 空格通常无关紧要，但有时需要使用空格来分隔字符序列，否则这些字符序列将组合成单个标记。 例如，在：</p><p><code>var that = this;</code></p><p><code>var</code> 和 <code>that</code> 之间的空格不能去掉，但其他空格可以去掉。</p>`,34),o=[e];function t(r,c,i,E,y,d){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{u as __pageData,b as default};
