import{_ as e,c as s,o,a as t}from"./app.51101ed4.js";const g=JSON.parse('{"title":"SIP002 URI scheme","description":"","frontmatter":{},"headers":[],"relativePath":"guide/sip002.md","lastUpdated":1680680288000}'),a={name:"guide/sip002.md"},n=t(`<h1 id="sip002-uri-scheme" tabindex="-1">SIP002 URI scheme <a class="header-anchor" href="#sip002-uri-scheme" aria-hidden="true">#</a></h1><p>SIP002 purposed a new URI scheme, following <a href="https://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="noreferrer">RFC3986</a>:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">SS-URI = &quot;ss://&quot; userinfo &quot;@&quot; hostname &quot;:&quot; port [ &quot;/&quot; ] [ &quot;?&quot; plugin ] [ &quot;#&quot; tag ]</span></span>
<span class="line"><span style="color:#A6ACCD;">userinfo = websafe-base64-encode-utf8(method  &quot;:&quot; password)</span></span>
<span class="line"><span style="color:#A6ACCD;">           method &quot;:&quot; password</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Note that encoding <code>userinfo</code> with Base64URL is recommended but optional for Stream and AEAD (<a href="https://github.com/shadowsocks/shadowsocks-org/issues/30" target="_blank" rel="noreferrer">SIP004</a>). But for AEAD-2022 (<a href="https://github.com/shadowsocks/shadowsocks-org/issues/196" target="_blank" rel="noreferrer">SIP022</a>), <code>userinfo</code> MUST NOT be encoded with Base64URL. When <code>userinfo</code> is not encoded, <code>method</code> and <code>password</code> MUST be percent encoded.</p><p>The last <code>/</code> should be appended if plugin is present, but is optional if only tag is present. Example: <code>ss://YmYtY2ZiOnRlc3Q@192.168.100.1:8888/?plugin=url-encoded-plugin-argument-value&amp;unsupported-arguments=should-be-ignored#Dummy+profile+name</code>. This kind of URIs can be parsed by standard libraries provided by most languages.</p><p>For plugin argument, we use the similar format as <code>TOR_PT_SERVER_TRANSPORT_OPTIONS</code>, which have the format like <code>simple-obfs;obfs=http;obfs-host=example.com</code> where colons, semicolons, equal signs and backslashes MUST be escaped with a backslash.</p><p>Examples:</p><p>With user info encoded with Base64URL:</p><ul><li><code>ss://YWVzLTEyOC1nY206dGVzdA@192.168.100.1:8888#Example1</code></li><li><code>ss://cmM0LW1kNTpwYXNzd2Q@192.168.100.1:8888/?plugin=obfs-local%3Bobfs%3Dhttp#Example2</code></li></ul><p>Plain user info:</p><ul><li><code>ss://2022-blake3-aes-256-gcm:YctPZ6U7xPPcU%2Bgp3u%2B0tx%2FtRizJN9K8y%2BuKlW2qjlI%3D@192.168.100.1:8888#Example3</code></li><li><code>ss://2022-blake3-aes-256-gcm:YctPZ6U7xPPcU%2Bgp3u%2B0tx%2FtRizJN9K8y%2BuKlW2qjlI%3D@192.168.100.1:8888/?plugin=v2ray-plugin%3Bserver#Example3</code></li></ul><p>FAQ:</p><p>Q1: Why parse user info to Base64URL?</p><p>A1: To safely encode all the characters in the key string. Note that we never try to &quot;encrypt&quot; your key in the URI.</p><p>Q2: Why not parse host name and port number into Base64URL?</p><p>A2: As mentioned above, we never try to &quot;encrypt&quot; anything in the URI. Additional parsing of host name and port number is not necessary.</p><p>Q3: Why not every client supports SIP002 URI scheme?</p><p>A3: Currently, SIP002 is still an optional feature unless the client supports SIP003 plugin.</p><p>Q4: Why the tags with space is truncated?</p><p>A4: White space is not legal in URI. It should be escaped. For example, <code>ss://...#shadowsocks server 1</code> (illegal URI) should be escaped into <code>ss://...#shadowsocks%20server%201</code> (legal URI).</p>`,20),p=[n];function r(c,i,l,d,u,h){return o(),s("div",null,p)}const f=e(a,[["render",r]]);export{g as __pageData,f as default};
