import{_ as l,c as e,o as i,a}from"./app.51101ed4.js";const p=JSON.parse('{"title":"\u8BFE\u7A0B\u5927\u7EB2","description":"","frontmatter":{},"headers":[{"level":2,"title":"C \u8BED\u8A00\u5FEB\u901F\u5165\u95E8","slug":"c-\u8BED\u8A00\u5FEB\u901F\u5165\u95E8","link":"#c-\u8BED\u8A00\u5FEB\u901F\u5165\u95E8","children":[{"level":3,"title":"1 \u7F16\u7A0B\u57FA\u7840","slug":"_1-\u7F16\u7A0B\u57FA\u7840","link":"#_1-\u7F16\u7A0B\u57FA\u7840","children":[]},{"level":3,"title":"2 hello world","slug":"_2-hello-world","link":"#_2-hello-world","children":[]},{"level":3,"title":"3 \u6570\u636E\u7C7B\u578B\uFF0C\u53D8\u91CF\uFF0C\u8FD0\u7B97\u7B26\uFF0C\u8868\u8FBE\u5F0F\u548C\u8BED\u53E5","slug":"_3-\u6570\u636E\u7C7B\u578B\uFF0C\u53D8\u91CF\uFF0C\u8FD0\u7B97\u7B26\uFF0C\u8868\u8FBE\u5F0F\u548C\u8BED\u53E5","link":"#_3-\u6570\u636E\u7C7B\u578B\uFF0C\u53D8\u91CF\uFF0C\u8FD0\u7B97\u7B26\uFF0C\u8868\u8FBE\u5F0F\u548C\u8BED\u53E5","children":[]},{"level":3,"title":"4 \u63A7\u5236\u6D41 - flow control","slug":"_4-\u63A7\u5236\u6D41-flow-control","link":"#_4-\u63A7\u5236\u6D41-flow-control","children":[]},{"level":3,"title":"5 \u51FD\u6570 - function","slug":"_5-\u51FD\u6570-function","link":"#_5-\u51FD\u6570-function","children":[]},{"level":3,"title":"6 \u6307\u9488\u4E0E\u6570\u7EC4 - pointer and array","slug":"_6-\u6307\u9488\u4E0E\u6570\u7EC4-pointer-and-array","link":"#_6-\u6307\u9488\u4E0E\u6570\u7EC4-pointer-and-array","children":[]},{"level":3,"title":"7 \u5E38\u91CF\uFF0C\u5B57\u7B26\u4E32\uFF0C\u5B57\u7B26\u6570\u7EC4","slug":"_7-\u5E38\u91CF\uFF0C\u5B57\u7B26\u4E32\uFF0C\u5B57\u7B26\u6570\u7EC4","link":"#_7-\u5E38\u91CF\uFF0C\u5B57\u7B26\u4E32\uFF0C\u5B57\u7B26\u6570\u7EC4","children":[]},{"level":3,"title":"8 \u52A8\u6001\u5185\u5B58\u5206\u914D - malloc and free","slug":"_8-\u52A8\u6001\u5185\u5B58\u5206\u914D-malloc-and-free","link":"#_8-\u52A8\u6001\u5185\u5B58\u5206\u914D-malloc-and-free","children":[]},{"level":3,"title":"9 \u5C40\u90E8\u53D8\u91CF\uFF0C\u5168\u5C40\u53D8\u91CF\uFF0C\u7B26\u53F7\u8868","slug":"_9-\u5C40\u90E8\u53D8\u91CF\uFF0C\u5168\u5C40\u53D8\u91CF\uFF0C\u7B26\u53F7\u8868","link":"#_9-\u5C40\u90E8\u53D8\u91CF\uFF0C\u5168\u5C40\u53D8\u91CF\uFF0C\u7B26\u53F7\u8868","children":[]},{"level":3,"title":"10 \u7ED3\u6784\u548C\u8054\u5408 - struct and union","slug":"_10-\u7ED3\u6784\u548C\u8054\u5408-struct-and-union","link":"#_10-\u7ED3\u6784\u548C\u8054\u5408-struct-and-union","children":[]},{"level":3,"title":"11 \u94FE\u8868 - link list","slug":"_11-\u94FE\u8868-link-list","link":"#_11-\u94FE\u8868-link-list","children":[]},{"level":3,"title":"12 \u9884\u5904\u7406\u5668 - preprocessor","slug":"_12-\u9884\u5904\u7406\u5668-preprocessor","link":"#_12-\u9884\u5904\u7406\u5668-preprocessor","children":[]},{"level":3,"title":"13 \u6807\u51C6\u8F93\u5165, \u6807\u51C6\u8F93\u51FA, \u9519\u8BEF\u8F93\u51FA - stdin, stdout, stderr","slug":"_13-\u6807\u51C6\u8F93\u5165-\u6807\u51C6\u8F93\u51FA-\u9519\u8BEF\u8F93\u51FA-stdin-stdout-stderr","link":"#_13-\u6807\u51C6\u8F93\u5165-\u6807\u51C6\u8F93\u51FA-\u9519\u8BEF\u8F93\u51FA-stdin-stdout-stderr","children":[]},{"level":3,"title":"14 \u8BFE\u7A0B\u56DE\u987E","slug":"_14-\u8BFE\u7A0B\u56DE\u987E","link":"#_14-\u8BFE\u7A0B\u56DE\u987E","children":[]}]}],"relativePath":"guide/czh01.md","lastUpdated":1680696797000}'),r={name:"guide/czh01.md"},n=a('<h1 id="\u8BFE\u7A0B\u5927\u7EB2" tabindex="-1">\u8BFE\u7A0B\u5927\u7EB2 <a class="header-anchor" href="#\u8BFE\u7A0B\u5927\u7EB2" aria-hidden="true">#</a></h1><h2 id="c-\u8BED\u8A00\u5FEB\u901F\u5165\u95E8" tabindex="-1">C \u8BED\u8A00\u5FEB\u901F\u5165\u95E8 <a class="header-anchor" href="#c-\u8BED\u8A00\u5FEB\u901F\u5165\u95E8" aria-hidden="true">#</a></h2><h3 id="_1-\u7F16\u7A0B\u57FA\u7840" tabindex="-1">1 \u7F16\u7A0B\u57FA\u7840 <a class="header-anchor" href="#_1-\u7F16\u7A0B\u57FA\u7840" aria-hidden="true">#</a></h3><ul><li>1.1 number system - \u6570\u5B57\u7CFB\u7EDF</li><li>1.2 \u6570\u636E\u5B58\u50A8\u683C\u5F0F</li><li>1.3 \u57FA\u7840\u67B6\u6784</li><li>1.4 \u64CD\u4F5C\u7CFB\u7EDF</li><li>1.5 \u5F00\u53D1\u73AF\u5883</li></ul><h3 id="_2-hello-world" tabindex="-1">2 hello world <a class="header-anchor" href="#_2-hello-world" aria-hidden="true">#</a></h3><ul><li>2.1 hello.c</li><li>2.2 C\u7A0B\u5E8F\u7684\u7F16\u8BD1</li></ul><h3 id="_3-\u6570\u636E\u7C7B\u578B\uFF0C\u53D8\u91CF\uFF0C\u8FD0\u7B97\u7B26\uFF0C\u8868\u8FBE\u5F0F\u548C\u8BED\u53E5" tabindex="-1">3 \u6570\u636E\u7C7B\u578B\uFF0C\u53D8\u91CF\uFF0C\u8FD0\u7B97\u7B26\uFF0C\u8868\u8FBE\u5F0F\u548C\u8BED\u53E5 <a class="header-anchor" href="#_3-\u6570\u636E\u7C7B\u578B\uFF0C\u53D8\u91CF\uFF0C\u8FD0\u7B97\u7B26\uFF0C\u8868\u8FBE\u5F0F\u548C\u8BED\u53E5" aria-hidden="true">#</a></h3><p>data type, variable, expression and statement</p><ul><li>3.1 \u6570\u636E\u7C7B\u578B - data type</li><li>3.2 \u53D8\u91CF - variable</li><li>3.3 \u8BED\u53E5 - statement</li><li>3.4 \u5C0F\u7ED3 \u53D8\u91CF\u58F0\u660E/\u5B9A\u4E49 - declaration and definition \u683C\u5F0F\u5316\u8F93\u51FA\u8F6C\u6362\u51FD\u6570 - printf \u53D8\u91CF\u521D\u59CB\u5316 - initialization</li><li>3.5 \u8FD0\u7B97\u7B26\u548C\u8868\u8FBE\u5F0F - operator and expression !, &amp; \u4E00\u5143\u8FD0\u7B97\u7B26 - unary \u5C0F\u7ED3</li><li>3.6 \u7F16\u7A0B\u7EC3\u4E60 \u6570\u636E\u7C7B\u578B\u5927\u5C0F \u4E24\u6574\u6570\u4E4B\u548C \u5706\u7684\u9762\u79EF</li></ul><h3 id="_4-\u63A7\u5236\u6D41-flow-control" tabindex="-1">4 \u63A7\u5236\u6D41 - flow control <a class="header-anchor" href="#_4-\u63A7\u5236\u6D41-flow-control" aria-hidden="true">#</a></h3><ul><li>4.1 if-else</li><li>4.2 else-if</li><li>4.3 while loop and for loop</li><li>4.4 \u7F16\u7A0B\u7EC3\u4E60 the Sum of Natural Numbers reverse integer palindrome perfect number print stars</li></ul><h3 id="_5-\u51FD\u6570-function" tabindex="-1">5 \u51FD\u6570 - function <a class="header-anchor" href="#_5-\u51FD\u6570-function" aria-hidden="true">#</a></h3><ul><li>5.1 \u51FD\u6570\u6982\u5FF5</li><li>5.2 \u53C2\u6570\u4F20\u9012</li><li>5.3 \u9012\u5F52\u51FD\u6570 - recursion</li></ul><h3 id="_6-\u6307\u9488\u4E0E\u6570\u7EC4-pointer-and-array" tabindex="-1">6 \u6307\u9488\u4E0E\u6570\u7EC4 - pointer and array <a class="header-anchor" href="#_6-\u6307\u9488\u4E0E\u6570\u7EC4-pointer-and-array" aria-hidden="true">#</a></h3><ul><li>6.1 \u6307\u9488 - pointer</li><li>6.2 \u6570\u7EC4 - array \u6570\u7EC4\u58F0\u660E\u548C\u521D\u59CB\u5316 \u6570\u7EC4\u8BBF\u95EE</li><li>6.3 \u6307\u9488\u4E0E\u6570\u7EC4</li><li>6.4 \u7F16\u7A0B\u7EC3\u4E60 printarray - \u6253\u5370\u6570\u7EC4 findelem - \u67E5\u627E\u6570\u7EC4\u5143\u7D20 maxofa - \u6570\u7EC4\u7684\u6700\u5927\u503C average - \u6570\u7EC4\u7684\u5E73\u5747\u503C insert sort - \u63D2\u5165\u6392\u5E8F binsearch - \u4E8C\u5206\u67E5\u627E (sorted array)</li></ul><h3 id="_7-\u5E38\u91CF\uFF0C\u5B57\u7B26\u4E32\uFF0C\u5B57\u7B26\u6570\u7EC4" tabindex="-1">7 \u5E38\u91CF\uFF0C\u5B57\u7B26\u4E32\uFF0C\u5B57\u7B26\u6570\u7EC4 <a class="header-anchor" href="#_7-\u5E38\u91CF\uFF0C\u5B57\u7B26\u4E32\uFF0C\u5B57\u7B26\u6570\u7EC4" aria-hidden="true">#</a></h3><ul><li>7.1 \u6570\u5B57\u5E38\u91CF\uFF0C\u5B57\u7B26\u5E38\u91CF</li><li>7.2 \u5B57\u7B26\u6570\u7EC4</li><li>7.3 \u5B57\u7B26\u4E32 - string literal</li></ul><h3 id="_8-\u52A8\u6001\u5185\u5B58\u5206\u914D-malloc-and-free" tabindex="-1">8 \u52A8\u6001\u5185\u5B58\u5206\u914D - malloc and free <a class="header-anchor" href="#_8-\u52A8\u6001\u5185\u5B58\u5206\u914D-malloc-and-free" aria-hidden="true">#</a></h3><h3 id="_9-\u5C40\u90E8\u53D8\u91CF\uFF0C\u5168\u5C40\u53D8\u91CF\uFF0C\u7B26\u53F7\u8868" tabindex="-1">9 \u5C40\u90E8\u53D8\u91CF\uFF0C\u5168\u5C40\u53D8\u91CF\uFF0C\u7B26\u53F7\u8868 <a class="header-anchor" href="#_9-\u5C40\u90E8\u53D8\u91CF\uFF0C\u5168\u5C40\u53D8\u91CF\uFF0C\u7B26\u53F7\u8868" aria-hidden="true">#</a></h3><p>local, global, symbol table</p><ul><li>9.1 \u5C40\u90E8\u53D8\u91CF - local variable</li><li>9.2 \u5168\u5C40\u53D8\u91CF - global variable</li><li>9.3 \u7B26\u53F7\u8868\uFF0C\u4F5C\u7528\u57DF - symbol table, scope</li></ul><h3 id="_10-\u7ED3\u6784\u548C\u8054\u5408-struct-and-union" tabindex="-1">10 \u7ED3\u6784\u548C\u8054\u5408 - struct and union <a class="header-anchor" href="#_10-\u7ED3\u6784\u548C\u8054\u5408-struct-and-union" aria-hidden="true">#</a></h3><ul><li>10.1 \u7ED3\u6784 - struct \u521B\u5EFA\u7ED3\u6784\uFF0C\u7ED3\u6784\u53D8\u91CF \u7ED3\u6784\u4F5C\u4E3A\u51FD\u6570\u7684\u53C2\u6570 \u6307\u5411\u7ED3\u6784\u7684\u6307\u9488</li><li>10.2 \u8054\u5408 - union typedef switch \u8BED\u53E5 union \u793A\u4F8B \u6570\u636E\u5C01\u88C5</li></ul><h3 id="_11-\u94FE\u8868-link-list" tabindex="-1">11 \u94FE\u8868 - link list <a class="header-anchor" href="#_11-\u94FE\u8868-link-list" aria-hidden="true">#</a></h3><ul><li>11.1 \u81EA\u5F15\u7528\u7ED3\u6784 - self referential structure</li><li>11.2 \u94FE\u8868 - link list \u521B\u5EFA\uFF0C\u6253\u5370\u94FE\u8868 atolink - \u6570\u7EC4\u8F6C\u6362\u4E3A\u94FE\u8868</li></ul><h3 id="_12-\u9884\u5904\u7406\u5668-preprocessor" tabindex="-1">12 \u9884\u5904\u7406\u5668 - preprocessor <a class="header-anchor" href="#_12-\u9884\u5904\u7406\u5668-preprocessor" aria-hidden="true">#</a></h3><h3 id="_13-\u6807\u51C6\u8F93\u5165-\u6807\u51C6\u8F93\u51FA-\u9519\u8BEF\u8F93\u51FA-stdin-stdout-stderr" tabindex="-1">13 \u6807\u51C6\u8F93\u5165, \u6807\u51C6\u8F93\u51FA, \u9519\u8BEF\u8F93\u51FA - stdin, stdout, stderr <a class="header-anchor" href="#_13-\u6807\u51C6\u8F93\u5165-\u6807\u51C6\u8F93\u51FA-\u9519\u8BEF\u8F93\u51FA-stdin-stdout-stderr" aria-hidden="true">#</a></h3><h3 id="_14-\u8BFE\u7A0B\u56DE\u987E" tabindex="-1">14 \u8BFE\u7A0B\u56DE\u987E <a class="header-anchor" href="#_14-\u8BFE\u7A0B\u56DE\u987E" aria-hidden="true">#</a></h3>',28),t=[n];function d(o,s,h,c,u,_){return i(),e("div",null,t)}const b=l(r,[["render",d]]);export{p as __pageData,b as default};
