import{_ as s,o as a,c as p,Q as e}from"./chunks/framework.8f76c11e.js";const y=JSON.parse('{"title":"Javascript 语言精粹","description":"JavaScript 语言精粹。javascript 课程课件，学习笔记。","frontmatter":{"description":"JavaScript 语言精粹。javascript 课程课件，学习笔记。","author":"silenthunter0814, Silent Hunter"},"headers":[],"relativePath":"guide/web/web03.md","filePath":"guide/web/web03.md","lastUpdated":1693631490000}'),n={name:"guide/web/web03.md"},l=e(`<h1 id="javascript-语言精粹" tabindex="-1">Javascript 语言精粹 <a class="header-anchor" href="#javascript-语言精粹" aria-label="Permalink to &quot;Javascript 语言精粹&quot;">​</a></h1><p>book: JavaScript: The Good Parts<br> authors: Douglas Crorkford</p><p>课程视频：</p><ul><li>油管: <a href="https://youtube.com/@silenthunter0814" target="_blank" rel="noreferrer">https://youtube.com/@silenthunter0814</a></li><li>B 站：<a href="https://space.bilibili.com/1551957972" target="_blank" rel="noreferrer">https://space.bilibili.com/1551957972</a></li></ul><hr><details><summary>章节目录</summary><nav class="table-of-contents"><ul><li><a href="#_1-语言精粹">1 语言精粹</a><ul><li><a href="#_1-1-为什么选择-javascript">1.1 为什么选择 JavaScript？</a></li><li><a href="#_1-2-分析-javascript">1.2 分析 JavaScript</a></li><li><a href="#_1-3-一个简单的测试场">1.3 一个简单的测试场</a></li></ul></li><li><a href="#_2-语法">2 语法</a><ul><li><a href="#_2-1-whitespace-空白字符">2.1 Whitespace 空白字符</a></li><li><a href="#_2-2-names-名称">2.2 Names 名称</a></li><li><a href="#_2-3-numbers-数字">2.3 Numbers 数字</a></li><li><a href="#_2-4-strings-字符串">2.4 Strings 字符串</a></li><li><a href="#_2-5-statements-语句">2.5 Statements 语句</a></li></ul></li></ul></nav></details><h2 id="_1-语言精粹" tabindex="-1">1 语言精粹 <a class="header-anchor" href="#_1-语言精粹" aria-label="Permalink to &quot;1 语言精粹&quot;">​</a></h2><h3 id="_1-1-为什么选择-javascript" tabindex="-1">1.1 为什么选择 JavaScript？ <a class="header-anchor" href="#_1-1-为什么选择-javascript" aria-label="Permalink to &quot;1.1 为什么选择 JavaScript？&quot;">​</a></h3><p>JavaScript 是网络浏览器的语言。 它与浏览器的联系使其成为世界上最流行的编程语言之一。</p><p>JavaScript 的神奇之处在于，即使不了解该语言，甚至不了解编程，也可以使用它完成工作。 它是一种具有巨大表达能力的语言。</p><h3 id="_1-2-分析-javascript" tabindex="-1">1.2 分析 JavaScript <a class="header-anchor" href="#_1-2-分析-javascript" aria-label="Permalink to &quot;1.2 分析 JavaScript&quot;">​</a></h3><p>JavaScript 是一种松散类型语言，因此 JavaScript 编译器无法检测类型错误。 对于从强类型语言转向 JavaScript 的人来说，这可能会令人震惊。 但事实证明，强类型并不能消除仔细测试的需要。</p><p>JavaScript 有一个非常强大的对象字面量表示法。</p><p>JavaScript 中一个有争议的特性是原型继承。</p><p>尽管 JavaScript 有缺陷，但它确实很好。 它重量轻且富有表现力。 一旦掌握了函数式编程的窍门，它就会变得非常有趣。</p><h3 id="_1-3-一个简单的测试场" tabindex="-1">1.3 一个简单的测试场 <a class="header-anchor" href="#_1-3-一个简单的测试场" aria-label="Permalink to &quot;1.3 一个简单的测试场&quot;">​</a></h3><p>创建一个名为 program.html 的 HTML 文件：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;program.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;program.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>&lt;pre&gt;</code> 元素表示预格式化文本，该文本将完全按照 HTML 文件中的写入方式呈现。 文本通常使用非比例或等宽字体呈现。 该元素内的空白按书写方式显示。</p><p>然后，在同一目录中创建一个名为 program.js 的文件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">writeln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">writeln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, world!&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，在浏览器中打开 HTML 文件以查看结果。</p><p>在整本书中，方法 <code>method</code> 用于定义新方法。 这是它的定义：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">func</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>将在第 4 章中进行解释。</p><h2 id="_2-语法" tabindex="-1">2 语法 <a class="header-anchor" href="#_2-语法" aria-label="Permalink to &quot;2 语法&quot;">​</a></h2><p>本章介绍了 JavaScript 优秀部分的语法，快速概述了该语言的结构。 我们将用铁路图来表示语法。</p><p>解释这些图的规则很简单：</p><ul><li>从左侧边缘开始，沿着轨道到达右侧边缘。</li><li>在进行过程中，您将遇到椭圆形中的文字以及矩形中的规则或描述。</li><li>任何可以通过跟踪轨道进行的序列都是合法的。</li><li>任何不能按照轨迹完成的序列都是不合法的。</li><li>两端各有一个条的铁路图允许在任意一对标记之间插入空格。 两端有两个条的铁路图则不然。</li></ul><p>本章中介绍的优秀部分的语法比整个语言的语法要简单得多。</p><h3 id="_2-1-whitespace-空白字符" tabindex="-1">2.1 Whitespace 空白字符 <a class="header-anchor" href="#_2-1-whitespace-空白字符" aria-label="Permalink to &quot;2.1 Whitespace 空白字符&quot;">​</a></h3><p>空白可以采用格式化字符或注释的形式。 空格通常无关紧要，但有时需要使用空格来分隔字符序列，否则这些字符序列将组合成单个标记。 例如，在：</p><p><code>var that = this;</code></p><p><code>var</code> 和 <code>that</code> 之间的空格不能去掉，但其他空格可以去掉。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.1.png" alt=""></p><p>JavaScript 提供两种形式的注释，以 <code>/* */</code> 形成的块注释和以 <code>//</code> 开头的行结束注释。</p><p>块注释对于注释代码块并不安全。 例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    var rm_a = /a*/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#F97583;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    var rm_a = /a*/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#D73A49;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>将导致语法错误。</p><h3 id="_2-2-names-名称" tabindex="-1">2.2 Names 名称 <a class="header-anchor" href="#_2-2-names-名称" aria-label="Permalink to &quot;2.2 Names 名称&quot;">​</a></h3><p>名称是一个字母，可选后跟一个或多个字母、数字或下划线。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.2.png" alt=""></p><p><code>$</code> 应被视作字符，可位于名称的任何位置。</p><p>名称用于语句、变量、参数、属性名称、运算符和标签。</p><h3 id="_2-3-numbers-数字" tabindex="-1">2.3 Numbers 数字 <a class="header-anchor" href="#_2-3-numbers-数字" aria-label="Permalink to &quot;2.3 Numbers 数字&quot;">​</a></h3><p><img src="https://silenthunter0814.github.io/pub/web03/2.3.png" alt=""></p><p>JavaScript 有单一数字类型。 在内部，它表示为 64 位浮点数。<br> 它没有单独的整数类型，因此 1 和 1.0 是相同的值。<br><code>console.log(1.0 === 1); // true</code></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.4.png" alt=""></p><p>如果数字文字具有指数部分，则文字的值是通过将 <code>e</code> 之前的部分乘以 10 的 <code>e</code> 后面部分的幂来计算的。 所以 100 和 <code>1e2</code> 是相同的数字。</p><p>负数可以通过使用 <code>-</code> 前缀运算符形成。</p><p><code>NaN</code> 值是一个数字值，它是无法产生正常结果的运算的结果。 <code>NaN</code> 不等于任何值，包括其本身。 可以使用 <code>isNaN(number)</code> 函数检测 NaN。</p><p>值 <code>Infinity</code> 表示大于 1.79769313486231570e+308 的所有值。</p><p>数字有方法（参见第 8 章）。 JavaScript 有一个 <code>Math</code> 对象，其中包含一组作用于数字的方法。 例如，<code>Math.floor(number)</code> 方法可用于将数字转换为整数。</p><h3 id="_2-4-strings-字符串" tabindex="-1">2.4 Strings 字符串 <a class="header-anchor" href="#_2-4-strings-字符串" aria-label="Permalink to &quot;2.4 Strings 字符串&quot;">​</a></h3><p>字符串文字可以用单引号或双引号引起来。 它可以包含零个或多个字符。 <code>\\</code>（反斜杠）是转义字符。 JavaScript 是在 Unicode 是 16 位字符集的时候构建的，因此 JavaScript 中的所有字符都是 16 位宽。</p><p>现代浏览器大多设置为变长字符集：<code>charset=&quot;utf-8&quot;</code>。这意味着字符可以是 8 位， 16 位或 32 位。</p><p>JavaScript 没有字符类型。 要表示一个字符，请创建一个仅包含一个字符的字符串。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.5.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.6.png" alt=""></p><p>转义序列允许将通常不允许的字符插入到字符串中，例如反斜杠、引号和控制字符。 <code>\\u</code> 约定允许以数字方式指定字符代码点。<br><code>console.log(&quot;A&quot; === &quot;\\u0041&quot;); // true</code></p><p>字符串具有长度属性。 例如：<br><code>console.log(&quot;seven&quot;.length === 5); // true</code></p><p>字符串是不可变的。 一旦制作完成，字符串就永远无法更改。 但是通过使用 <code>+</code> 运算符将其他字符串连接在一起可以很容易地创建一个新字符串。</p><p>包含完全相同且顺序相同的字符的两个字符串被认为是同一个字符串。 所以：<br><code>console.log(&#39;c&#39; + &#39;a&#39; + &#39;t&#39; === &#39;cat&#39;);</code></p><p>是真。</p><p>字符串有方法（参见第 8 章）：<br><code>console.log(&#39;cat&#39;.toUpperCase() === &#39;CAT&#39;); // true</code></p><h3 id="_2-5-statements-语句" tabindex="-1">2.5 Statements 语句 <a class="header-anchor" href="#_2-5-statements-语句" aria-label="Permalink to &quot;2.5 Statements 语句&quot;">​</a></h3><p><img src="https://silenthunter0814.github.io/pub/web03/2.7.png" alt=""></p><p>编译单元包含一组可执行语句。 在 Web 浏览器中，每个 <code>&lt;script&gt;</code> 标签都会提供一个编译单元，该编译单元会被编译并立即执行。</p><p>当在函数内部使用时，<code>var</code> 语句定义函数的局部变量。<br><code>let</code> 定义块级作用域变量。块是一组用花括号括起来的语句。</p><p>语句往往按从上到下的顺序执行。 执行顺序可以通过条件语句（<code>if</code> 和 <code>switch</code>）、循环语句（<code>while</code>、<code>for</code> 和 <code>do</code>）、中断语句（<code>break</code>、<code>return</code> 和 <code>throw</code>）以及函数调用来更改。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.8.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.9.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.10.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.11.png" alt=""></p>`,74),o=[l];function t(r,c,i,d,h,u){return a(),p("div",null,o)}const b=s(n,[["render",t]]);export{y as __pageData,b as default};
