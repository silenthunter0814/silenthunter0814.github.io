import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.8f76c11e.js";const b=JSON.parse('{"title":"Javascript 语言精粹","description":"JavaScript 语言精粹。javascript 课程课件，学习笔记。","frontmatter":{"description":"JavaScript 语言精粹。javascript 课程课件，学习笔记。","author":"silenthunter0814, Silent Hunter"},"headers":[],"relativePath":"guide/web/web03.md","filePath":"guide/web/web03.md","lastUpdated":1693656214000}'),l={name:"guide/web/web03.md"},o=p(`<h1 id="javascript-语言精粹" tabindex="-1">Javascript 语言精粹 <a class="header-anchor" href="#javascript-语言精粹" aria-label="Permalink to &quot;Javascript 语言精粹&quot;">​</a></h1><p>book: JavaScript: The Good Parts<br> authors: Douglas Crorkford</p><p>课程视频：</p><ul><li>油管: <a href="https://youtube.com/@silenthunter0814" target="_blank" rel="noreferrer">https://youtube.com/@silenthunter0814</a></li><li>B 站：<a href="https://space.bilibili.com/1551957972" target="_blank" rel="noreferrer">https://space.bilibili.com/1551957972</a></li></ul><hr><details><summary>章节目录</summary><nav class="table-of-contents"><ul><li><a href="#_1-语言精粹">1 语言精粹</a><ul><li><a href="#_1-1-为什么选择-javascript">1.1 为什么选择 JavaScript？</a></li><li><a href="#_1-2-分析-javascript">1.2 分析 JavaScript</a></li><li><a href="#_1-3-一个简单的测试场">1.3 一个简单的测试场</a></li></ul></li><li><a href="#_2-语法">2 语法</a><ul><li><a href="#_2-1-whitespace-空白字符">2.1 Whitespace 空白字符</a></li><li><a href="#_2-2-names-名称">2.2 Names 名称</a></li><li><a href="#_2-3-numbers-数字">2.3 Numbers 数字</a></li><li><a href="#_2-4-strings-字符串">2.4 Strings 字符串</a></li><li><a href="#_2-5-statements-语句">2.5 Statements 语句</a></li><li><a href="#_2-6-expressions-表达式">2.6 Expressions 表达式</a></li><li><a href="#_2-7-literals-文字-字面量">2.7 Literals 文字/字面量</a></li><li><a href="#_2-8-functions-函数">2.8 Functions 函数</a></li></ul></li><li><a href="#_3-object-对象">3 Object 对象</a><ul><li><a href="#_3-1-对象字面量">3.1 对象字面量</a></li><li><a href="#_3-2-retrieval-对象访问">3.2 Retrieval 对象访问</a></li><li><a href="#_3-3-update-属性更新">3.3 Update 属性更新</a></li><li><a href="#_3-4-reference-引用">3.4 Reference 引用</a></li><li><a href="#_3-5-prototype-原型">3.5 Prototype 原型</a></li><li><a href="#_3-6-reflection-反射">3.6 Reflection 反射</a></li></ul></li></ul></nav></details><h2 id="_1-语言精粹" tabindex="-1">1 语言精粹 <a class="header-anchor" href="#_1-语言精粹" aria-label="Permalink to &quot;1 语言精粹&quot;">​</a></h2><h3 id="_1-1-为什么选择-javascript" tabindex="-1">1.1 为什么选择 JavaScript？ <a class="header-anchor" href="#_1-1-为什么选择-javascript" aria-label="Permalink to &quot;1.1 为什么选择 JavaScript？&quot;">​</a></h3><p>JavaScript 是网络浏览器的语言。 它与浏览器的联系使其成为世界上最流行的编程语言之一。</p><p>JavaScript 的神奇之处在于，即使不了解该语言，甚至不了解编程，也可以使用它完成工作。 它是一种具有巨大表达能力的语言。</p><h3 id="_1-2-分析-javascript" tabindex="-1">1.2 分析 JavaScript <a class="header-anchor" href="#_1-2-分析-javascript" aria-label="Permalink to &quot;1.2 分析 JavaScript&quot;">​</a></h3><p>JavaScript 是一种松散类型语言，因此 JavaScript 编译器无法检测类型错误。 对于从强类型语言转向 JavaScript 的人来说，这可能会令人震惊。 但事实证明，强类型并不能消除仔细测试的需要。</p><p>JavaScript 有一个非常强大的对象字面量表示法。</p><p>JavaScript 中一个有争议的特性是原型继承。</p><p>尽管 JavaScript 有缺陷，但它确实很好。 它重量轻且富有表现力。 一旦掌握了函数式编程的窍门，它就会变得非常有趣。</p><h3 id="_1-3-一个简单的测试场" tabindex="-1">1.3 一个简单的测试场 <a class="header-anchor" href="#_1-3-一个简单的测试场" aria-label="Permalink to &quot;1.3 一个简单的测试场&quot;">​</a></h3><p>创建一个名为 program.html 的 HTML 文件：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;program.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;program.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>&lt;pre&gt;</code> 元素表示预格式化文本，该文本将完全按照 HTML 文件中的写入方式呈现。 文本通常使用非比例或等宽字体呈现。 该元素内的空白按书写方式显示。</p><p>然后，在同一目录中创建一个名为 program.js 的文件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">writeln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">writeln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, world!&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，在浏览器中打开 HTML 文件以查看结果。</p><p>在整本书中，方法 <code>method</code> 用于定义新方法。 这是它的定义：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">func</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">func</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>将在第 4 章中进行解释。</p><h2 id="_2-语法" tabindex="-1">2 语法 <a class="header-anchor" href="#_2-语法" aria-label="Permalink to &quot;2 语法&quot;">​</a></h2><p>本章介绍了 JavaScript 优秀部分的语法，快速概述了该语言的结构。 我们将用铁路图来表示语法。</p><p>解释这些图的规则很简单：</p><ul><li>从左侧边缘开始，沿着轨道到达右侧边缘。</li><li>在进行过程中，您将遇到椭圆形中的文字以及矩形中的规则或描述。</li><li>任何可以通过跟踪轨道进行的序列都是合法的。</li><li>任何不能按照轨迹完成的序列都是不合法的。</li><li>两端各有一个条的铁路图允许在任意一对标记之间插入空格。 两端有两个条的铁路图则不然。</li></ul><p>本章中介绍的优秀部分的语法比整个语言的语法要简单得多。</p><h3 id="_2-1-whitespace-空白字符" tabindex="-1">2.1 Whitespace 空白字符 <a class="header-anchor" href="#_2-1-whitespace-空白字符" aria-label="Permalink to &quot;2.1 Whitespace 空白字符&quot;">​</a></h3><p>空白可以采用格式化字符或注释的形式。 空格通常无关紧要，但有时需要使用空格来分隔字符序列，否则这些字符序列将组合成单个标记。 例如，在：</p><p><code>var that = this;</code></p><p><code>var</code> 和 <code>that</code> 之间的空格不能去掉，但其他空格可以去掉。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.1.png" alt=""></p><p>JavaScript 提供两种形式的注释，以 <code>/* */</code> 形成的块注释和以 <code>//</code> 开头的行结束注释。</p><p>块注释对于注释代码块并不安全。 例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    var rm_a = /a*/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#F97583;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    var rm_a = /a*/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#D73A49;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>将导致语法错误。</p><h3 id="_2-2-names-名称" tabindex="-1">2.2 Names 名称 <a class="header-anchor" href="#_2-2-names-名称" aria-label="Permalink to &quot;2.2 Names 名称&quot;">​</a></h3><p>名称是一个字母，可选后跟一个或多个字母、数字或下划线。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.2.png" alt=""></p><p><code>$</code> 应被视作字符，可位于名称的任何位置。</p><p>名称用于语句、变量、参数、属性名称、运算符和标签。</p><h3 id="_2-3-numbers-数字" tabindex="-1">2.3 Numbers 数字 <a class="header-anchor" href="#_2-3-numbers-数字" aria-label="Permalink to &quot;2.3 Numbers 数字&quot;">​</a></h3><p><img src="https://silenthunter0814.github.io/pub/web03/2.3.png" alt=""></p><p>JavaScript 有单一数字类型。 在内部，它表示为 64 位浮点数。<br> 它没有单独的整数类型，因此 1 和 1.0 是相同的值。<br><code>console.log(1.0 === 1); // true</code></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.4.png" alt=""></p><p>如果数字文字具有指数部分，则文字的值是通过将 <code>e</code> 之前的部分乘以 10 的 <code>e</code> 后面部分的幂来计算的。 所以 100 和 <code>1e2</code> 是相同的数字。</p><p>负数可以通过使用 <code>-</code> 前缀运算符形成。</p><p><code>NaN</code> 值是一个数字值，它是无法产生正常结果的运算的结果。 <code>NaN</code> 不等于任何值，包括其本身。 可以使用 <code>isNaN(number)</code> 函数检测 NaN。</p><p>值 <code>Infinity</code> 表示大于 1.79769313486231570e+308 的所有值。</p><p>数字有方法（参见第 8 章）。 JavaScript 有一个 <code>Math</code> 对象，其中包含一组作用于数字的方法。 例如，<code>Math.floor(number)</code> 方法可用于将数字转换为整数。</p><h3 id="_2-4-strings-字符串" tabindex="-1">2.4 Strings 字符串 <a class="header-anchor" href="#_2-4-strings-字符串" aria-label="Permalink to &quot;2.4 Strings 字符串&quot;">​</a></h3><p>字符串文字可以用单引号或双引号引起来。 它可以包含零个或多个字符。 <code>\\</code>（反斜杠）是转义字符。 JavaScript 是在 Unicode 是 16 位字符集的时候构建的，因此 JavaScript 中的所有字符都是 16 位宽。</p><p>现代浏览器大多设置为变长字符集：<code>charset=&quot;utf-8&quot;</code>。这意味着字符可以是 8 位， 16 位或 32 位。</p><p>JavaScript 没有字符类型。 要表示一个字符，请创建一个仅包含一个字符的字符串。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.5.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.6.png" alt=""></p><p>转义序列允许将通常不允许的字符插入到字符串中，例如反斜杠、引号和控制字符。 <code>\\u</code> 约定允许以数字方式指定字符代码点。<br><code>console.log(&quot;A&quot; === &quot;\\u0041&quot;); // true</code></p><p>字符串具有长度属性。 例如：<br><code>console.log(&quot;seven&quot;.length === 5); // true</code></p><p>字符串是不可变的。 一旦制作完成，字符串就永远无法更改。 但是通过使用 <code>+</code> 运算符将其他字符串连接在一起可以很容易地创建一个新字符串。</p><p>包含完全相同且顺序相同的字符的两个字符串被认为是同一个字符串。 所以：<br><code>console.log(&#39;c&#39; + &#39;a&#39; + &#39;t&#39; === &#39;cat&#39;); // true</code></p><p>字符串有方法（参见第 8 章）：<br><code>console.log(&#39;cat&#39;.toUpperCase() === &#39;CAT&#39;); // true</code></p><h3 id="_2-5-statements-语句" tabindex="-1">2.5 Statements 语句 <a class="header-anchor" href="#_2-5-statements-语句" aria-label="Permalink to &quot;2.5 Statements 语句&quot;">​</a></h3><p><img src="https://silenthunter0814.github.io/pub/web03/2.7.png" alt=""></p><p>编译单元包含一组可执行语句。 在 Web 浏览器中，每个 <code>&lt;script&gt;</code> 标签都会提供一个编译单元，该编译单元会被编译并立即执行。</p><p>当在函数内部使用时，<code>var</code> 语句定义函数的局部变量。<br><code>let</code> 定义块级作用域变量。块是一组用花括号括起来的语句。</p><p>语句往往按从上到下的顺序执行。 执行顺序可以通过条件语句（<code>if</code> 和 <code>switch</code>）、循环语句（<code>while</code>、<code>for</code> 和 <code>do</code>）、中断语句（<code>break</code>、<code>return</code> 和 <code>throw</code>）以及函数调用来更改。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.8.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.9.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.10.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.11.png" alt=""></p><p>以下是虚假值：</p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li>The empty string <code>&quot;&quot;</code></li><li>The number <code>0</code></li><li>The number <code>NaN</code></li></ul><p>所有其他值都是 <code>true</code>，包括 <code>true</code>、字符串 <code>“false”</code> 和所有对象。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.12.png" alt=""></p><p><code>switch</code> 语句执行多路分支。 它将表达式与所有指定的情况进行比较以确定是否相等。 该表达式可以生成数字或字符串。 当找到完全匹配时，执行匹配的 <code>case</code> 子句的语句。 如果没有匹配，则执行可选的 <code>default</code> 语句。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.13.png" alt=""></p><p><code>case</code> 子句包含一个或多个 <code>case</code> 表达式。 <code>case</code> 表达式不必是常量。 子句后面的语句应该是破坏性语句，以防止陷入下一种情况。 <code>Break</code> 语句可用于退出 <code>switch</code>。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.14.png" alt=""></p><p><code>while</code> 语句执行一个简单的循环。 如果表达式为假，则循环将中断。 当表达式为真时，该块将被执行。</p><p><code>for</code> 语句是一个比较复杂的循环语句。 它有两种形式：<br> 常规形式由三个可选子句控制：初始化、条件和增量。 首先，完成初始化，这通常会初始化循环变量。 然后，评估条件。 通常，这会根据完成标准测试循环变量。 如果省略条件，则假定条件为 true。 如果条件为假，则循环中断。 否则，执行该块，然后执行增量，然后根据条件重复循环。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.15.png" alt=""></p><p>另一种形式 <code>for in</code>（在 in 中调用）枚举对象的属性名称（或键）。 在每次迭代中，对象中的另一个属性名称字符串会被分配给该变量。</p><p>通常需要测试 <code>object.hasOwnProperty(variable</code> 来确定属性名称是否真正是对象的成员，还是在原型链上找到的。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> prop </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(prop)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> prop </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(prop)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>对于实现了 <code>Symbol.iterator</code> 接口的对象，可以使用 <code>for of</code> 循环，例如数组:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> prop </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> props) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> prop </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> props) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://silenthunter0814.github.io/pub/web03/2.16.png" alt=""></p><p><code>do</code> 语句与 <code>while</code> 语句类似，只不过表达式是在块执行之后而不是之前进行测试。 这意味着该块将始终至少执行一次。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.17.png" alt=""></p><p><code>try</code> 语句执行一个块并捕获该块引发的任何异常。 <code>catch</code> 子句定义了一个将接收异常对象的新变量。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.18.png" alt=""></p><p><code>throw</code> 语句引发异常。 如果 <code>throw</code> 语句位于 <code>try</code> 块中，则控制权将转到 <code>catch</code> 子句。 否则，函数调用将被放弃，控制权将转到调用函数中 <code>try</code> 的 <code>catch</code> 子句。<br> 该表达式通常是包含名称属性和消息属性的对象文字。 异常捕获器可以使用该信息来确定要做什么。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* normal statements */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abort&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        cosole.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;can not goes here&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* normal statements */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abort&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        cosole.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;can not goes here&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(error) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><img src="https://silenthunter0814.github.io/pub/web03/2.19.png" alt=""></p><p><code>return</code> 语句导致函数提前返回。 它还可以指定要返回的值。 如果未指定返回表达式，则返回值将是未定义的。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.20.png" alt=""></p><p><code>break</code> 语句导致循环语句或 <code>switch</code> 语句退出。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://silenthunter0814.github.io/pub/web03/2.21.png" alt=""></p><p>表达式语句可以为一个或多个变量或成员赋值、调用方法、从对象中删除属性。 <code>=</code> 运算符用于赋值。 不要将它与 <code>===</code> 相等运算符混淆。 <code>+=</code> 运算符可以进行字符串连接。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">y </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(y);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-6-expressions-表达式" tabindex="-1">2.6 Expressions 表达式 <a class="header-anchor" href="#_2-6-expressions-表达式" aria-label="Permalink to &quot;2.6 Expressions 表达式&quot;">​</a></h3><p><img src="https://silenthunter0814.github.io/pub/web03/2.22.png" alt=""></p><p>最简单的表达式是文字值（例如字符串或数字）、变量、内置值（<code>true</code>、<code>false</code>、<code>null</code>、<code>undefined</code>、<code>NaN</code> 或 <code>Infinity</code>）、前面带有 <code>new</code> 的调用表达式、前面带有细化表达式，通过删除、括在括号中的表达式、前面带有前缀运算符的表达式或后面跟着以下内容的表达式：</p><ul><li>一个中缀运算符和另一个表达式</li><li><code>？</code> 三元运算符后跟另一个表达式，然后是 <code>:</code>，然后是另一个表达式</li><li>An invocation</li><li>A refinement</li></ul><p><code>？</code> 三元运算符需要三个表达式。 如果第一个表达式为真，则生成第二个表达式的值。 但如果第一个表达式为假，则生成第三个表达式的值。</p><p>表2-1中运算符优先级列表顶部的运算符具有更高的优先级。 他们捆绑得最紧。 底部的运算符的优先级最低。 括号可用于更改正常优先级，因此：<br><code>2 + 3 * 5 === 17</code><br><code>(2 + 3) * 5 === 25</code></p><p>Table 2-1. Operator precedence</p><table><thead><tr><th>operator</th><th>description</th></tr></thead><tbody><tr><td>. [] ( )</td><td>细化和调用</td></tr><tr><td>delete new typeof + - !</td><td>一元运算符</td></tr><tr><td>* / %</td><td>乘法、除法、余数</td></tr><tr><td>+ -</td><td>加法/连接，减法</td></tr><tr><td>&gt;= &lt;= &gt; &lt;</td><td>关系</td></tr><tr><td>=== !==</td><td>相等于</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>\`</td><td></td></tr><tr><td>?:</td><td>三元</td></tr></tbody></table><hr><p><img src="https://silenthunter0814.github.io/pub/web03/2.23.png" alt=""></p><p><code>typeof</code> 生成的值有 <code>“number”</code>、<code>“string”</code>、<code>“boolean”</code>、<code>“undefined”</code>、<code>“function”</code>和 <code>“object”</code>。 如果判断数组，需要使用 <code>Array.isArray(arr)</code> 进行判断。</p><p>如果 <code>!</code> 的操作数是 <code>true</code>，它会产生 <code>false</code>。 否则，它产生 <code>true</code>。</p><p><code>+</code> 运算符进行算术加法或连接。 如果您希望它相加，请确保两个操作数都是数字。</p><p>即使两个操作数都是整数，<code>/</code> 运算符也可以产生非整数结果。</p><p>如果第一个操作数为假，&amp;&amp; 运算符将生成其第一个操作数的值。 否则，它生成第二个操作数的值。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.24.png" alt=""></p><p><code>||</code> 如果第一个操作数为真，则运算符生成其第一个操作数的值。 否则，它生成第二个操作数的值。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.25.png" alt=""></p><p>调用会导致函数值的执行。 调用运算符是函数值后面的一对括号。 括号可以包含将传递给函数的参数。 第 4 章将详细介绍函数。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.26.png" alt=""></p><p>细化用于指定对象或数组的属性或元素。 这将在下一章中详细描述。</p><h3 id="_2-7-literals-文字-字面量" tabindex="-1">2.7 Literals 文字/字面量 <a class="header-anchor" href="#_2-7-literals-文字-字面量" aria-label="Permalink to &quot;2.7 Literals 文字/字面量&quot;">​</a></h3><p>对象字面量是指定新对象的一种方便的表示法。 属性的名称可以指定为名称或字符串。 下一章将详细介绍对象字面量。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.27.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.28.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.29.png" alt=""></p><p>数组文字是指定新数组的便捷表示法。 第 6 章将详细介绍数组文字。</p><p><img src="https://silenthunter0814.github.io/pub/web03/2.30.png" alt=""></p><p>第 7 章将详细介绍正则表达式。</p><h3 id="_2-8-functions-函数" tabindex="-1">2.8 Functions 函数 <a class="header-anchor" href="#_2-8-functions-函数" aria-label="Permalink to &quot;2.8 Functions 函数&quot;">​</a></h3><p><img src="https://silenthunter0814.github.io/pub/web03/2.31.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.32.png" alt=""></p><p><img src="https://silenthunter0814.github.io/pub/web03/2.33.png" alt=""></p><p>函数字面量定义函数值。 它可以有一个可选名称，可以用来递归地调用自身。 它可以指定一个参数列表，这些参数将充当由调用参数初始化的变量。 函数体包括变量定义和语句。 第 4 章将详细介绍函数。</p><h2 id="_3-object-对象" tabindex="-1">3 Object 对象 <a class="header-anchor" href="#_3-object-对象" aria-label="Permalink to &quot;3 Object 对象&quot;">​</a></h2><p>JavaScript 的简单类型有数字、字符串、布尔值（<code>true</code> 和 <code>false</code>）、<code>null</code> 和 <code>undefined</code>。 所有其他值都是对象。 数字、字符串和布尔值与对象类似，因为它们具有方法，但它们是不可变的。 JavaScript 中的对象是可变键控集合。 在 JavaScript 中，数组是对象，函数是对象，正则表达式是对象，当然，对象也是对象。</p><p>对象是属性的容器，其中属性具有名称和值。 属性名称可以是任何字符串，包括空字符串。 属性值可以是除未定义之外的任何 JavaScript 值。</p><p>JavaScript 中的对象是无类的。 新属性的名称或属性的值没有限制。 对象对于收集和组织数据很有用。 对象可以包含其他对象，因此它们可以轻松表示树或图结构。</p><p>JavaScript 包含原型链接功能，允许一个对象继承另一个对象的属性。 如果使用得当，这可以减少对象初始化时间和内存消耗。</p><h3 id="_3-1-对象字面量" tabindex="-1">3.1 对象字面量 <a class="header-anchor" href="#_3-1-对象字面量" aria-label="Permalink to &quot;3.1 对象字面量&quot;">​</a></h3><p>对象字面量为创建新对象值提供了非常方便的表示法。 对象字面量是一对围绕零个或多个名称/值对的大括号。 对象字面量可以出现在表达式可以出现的任何地方：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> empty_object </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> stooge </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;first-name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Jerome&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;last-name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Howard&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> empty_object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> stooge </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;first-name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Jerome&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;last-name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Howard&quot;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>属性的名称可以是任何字符串，包括空字符串。 如果属性名称是合法的 JavaScript 名称而不是保留字，则对象字面量中属性名称周围的引号是可选的。 因此“first-name”周围需要引号，但first_name 周围的引号是可选的。 逗号用于分隔键值对属性。</p><p>属性的值可以从任何表达式获取，包括另一个对象文字。 对象可以嵌套：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> flight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    airline: </span><span style="color:#9ECBFF;">&quot;Oceanic&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    number: </span><span style="color:#79B8FF;">815</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    departure: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        IATA: </span><span style="color:#9ECBFF;">&quot;SYD&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        time: </span><span style="color:#9ECBFF;">&quot;2004-09-22 14:55&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        city: </span><span style="color:#9ECBFF;">&quot;Sydney&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    arrival: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        IATA: </span><span style="color:#9ECBFF;">&quot;LAX&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        time: </span><span style="color:#9ECBFF;">&quot;2004-09-23 10:42&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        city: </span><span style="color:#9ECBFF;">&quot;Los Angeles&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> flight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    airline: </span><span style="color:#032F62;">&quot;Oceanic&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    number: </span><span style="color:#005CC5;">815</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    departure: {</span></span>
<span class="line"><span style="color:#24292E;">        IATA: </span><span style="color:#032F62;">&quot;SYD&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        time: </span><span style="color:#032F62;">&quot;2004-09-22 14:55&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        city: </span><span style="color:#032F62;">&quot;Sydney&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    arrival: {</span></span>
<span class="line"><span style="color:#24292E;">        IATA: </span><span style="color:#032F62;">&quot;LAX&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        time: </span><span style="color:#032F62;">&quot;2004-09-23 10:42&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        city: </span><span style="color:#032F62;">&quot;Los Angeles&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3-2-retrieval-对象访问" tabindex="-1">3.2 Retrieval 对象访问 <a class="header-anchor" href="#_3-2-retrieval-对象访问" aria-label="Permalink to &quot;3.2 Retrieval 对象访问&quot;">​</a></h3><p>通过将字符串表达式包装在 <code>[ ]</code> 后缀中，可以从对象中检索值。 如果字符串表达式是字符串文字，并且它是合法的 JavaScript 名称而不是保留字，则可以使用 <code>.</code> 记号代替。 <code>.</code> 运算符是首选表示法，因为它更紧凑并且读起来更好：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stooge[</span><span style="color:#9ECBFF;">&quot;first-name&quot;</span><span style="color:#E1E4E8;">]    </span><span style="color:#6A737D;">//&quot;Jerome&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">flist.departure.</span><span style="color:#79B8FF;">IATA</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;SYD&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stooge[</span><span style="color:#032F62;">&quot;first-name&quot;</span><span style="color:#24292E;">]    </span><span style="color:#6A737D;">//&quot;Jerome&quot;</span></span>
<span class="line"><span style="color:#24292E;">flist.departure.</span><span style="color:#005CC5;">IATA</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;SYD&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果尝试检索不存在的成员，则会生成未定义的值：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stooge[</span><span style="color:#9ECBFF;">&quot;middle-name&quot;</span><span style="color:#E1E4E8;">]    </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">flight.status            </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">stooge[</span><span style="color:#9ECBFF;">&quot;FIRST-NAME&quot;</span><span style="color:#E1E4E8;">]     </span><span style="color:#6A737D;">// undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stooge[</span><span style="color:#032F62;">&quot;middle-name&quot;</span><span style="color:#24292E;">]    </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#24292E;">flight.status            </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#24292E;">stooge[</span><span style="color:#032F62;">&quot;FIRST-NAME&quot;</span><span style="color:#24292E;">]     </span><span style="color:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>||</code> 运算符可用于填充默认值：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> middle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stooge[</span><span style="color:#9ECBFF;">&quot;middle-name&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;(none)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flight.status </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;unknown&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stooge[</span><span style="color:#032F62;">&quot;middle-name&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(none)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flight.status </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;unknown&quot;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>尝试从未定义中检索值将引发 TypeError 异常。 可以使用 <code>&amp;&amp;</code> 运算符来防止这种情况：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flight.equipment    </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">flight.equipment.model    </span><span style="color:#6A737D;">// throw &quot;TypeError&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">flight.equipment </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> flight.equipment.model     </span><span style="color:#6A737D;">// undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flight.equipment    </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"><span style="color:#24292E;">flight.equipment.model    </span><span style="color:#6A737D;">// throw &quot;TypeError&quot;</span></span>
<span class="line"><span style="color:#24292E;">flight.equipment </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> flight.equipment.model     </span><span style="color:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-3-update-属性更新" tabindex="-1">3.3 Update 属性更新 <a class="header-anchor" href="#_3-3-update-属性更新" aria-label="Permalink to &quot;3.3 Update 属性更新&quot;">​</a></h3><p>对象中的值可以通过赋值来更新。 如果属性名称已存在于对象中，则替换属性值：<br><code>stooge[&#39;first-name&#39;] = &#39;Jerome&#39;;</code></p><p>如果该对象尚不具有该属性名称，则该对象将被增加新属性：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stooge[</span><span style="color:#9ECBFF;">&#39;middle-name&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Lester&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">stooge.nickname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Curly&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">flight.equipment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    model: </span><span style="color:#9ECBFF;">&#39;Boeing 777&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">flight.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;overdue&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stooge[</span><span style="color:#032F62;">&#39;middle-name&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Lester&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">stooge.nickname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Curly&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">flight.equipment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    model: </span><span style="color:#032F62;">&#39;Boeing 777&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">flight.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;overdue&#39;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-4-reference-引用" tabindex="-1">3.4 Reference 引用 <a class="header-anchor" href="#_3-4-reference-引用" aria-label="Permalink to &quot;3.4 Reference 引用&quot;">​</a></h3><p>对象通过引用传递。 它们永远不会被复制：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> stooge </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stooge;</span></span>
<span class="line"><span style="color:#E1E4E8;">x.nickname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Curly&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> nick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stooge.nickname;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(nick </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> x.nickname);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> b);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> stooge </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stooge;</span></span>
<span class="line"><span style="color:#24292E;">x.nickname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Curly&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> nick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stooge.nickname;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(nick </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> x.nickname);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> b);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_3-5-prototype-原型" tabindex="-1">3.5 Prototype 原型 <a class="header-anchor" href="#_3-5-prototype-原型" aria-label="Permalink to &quot;3.5 Prototype 原型&quot;">​</a></h3><p>每个对象都链接到一个原型对象，它可以从中继承属性。 所有从对象字面量创建的对象都链接到 <code>Object.prototype</code>，这是 JavaScript 的标准对象。</p><p>当创建一个新对象时，可以选择应该作为其原型的对象。 JavaScript 提供的执行此操作的机制混乱而复杂，但可以显着简化。 我们将向 Object 函数添加一个 <code>create</code> 方法。 <code>create</code> 方法创建一个使用旧对象作为其原型的新对象。 下一章将详细介绍函数。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* JavaScript 已提供此静态方法： Object.create() */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> Object.create </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {};</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">F</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> o;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> another_stooge </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(stooge);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* JavaScript 已提供此静态方法： Object.create() */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> Object.create </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {};</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">F</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> o;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> another_stooge </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(stooge);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>原型链接对更新没有影响。 当我们对一个对象进行更改时，该对象的原型不会被触及：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">another_stooge[</span><span style="color:#9ECBFF;">&#39;first-name&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Harry&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">another_stooge[</span><span style="color:#9ECBFF;">&#39;middle-name&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Moses&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">another_stooge.nickname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Moe&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">another_stooge[</span><span style="color:#032F62;">&#39;first-name&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Harry&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">another_stooge[</span><span style="color:#032F62;">&#39;middle-name&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Moses&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">another_stooge.nickname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Moe&#39;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>原型链接仅用于检索。 如果我们尝试从对象中检索属性值，并且该对象缺少属性名称，则 JavaScript 会尝试从原型对象中检索属性值。 如果该对象缺少该属性，则它将转到其原型，依此类推，直到该过程最终以 <code>Object.prototype</code> 触底。 如果所需的属性在原型链中不存在，则结果是未定义的值。 这称为委托 (delegation)。</p><p>原型关系是一种动态关系。 如果我们向原型添加一个新属性，该属性将立即在基于该原型的所有对象中可见：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stooge.profession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;actor&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">another_stooge.profession    </span><span style="color:#6A737D;">// &#39;actor&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stooge.profession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;actor&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">another_stooge.profession    </span><span style="color:#6A737D;">// &#39;actor&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们将在第 6 章中看到更多关于原型链的内容。</p><h3 id="_3-6-reflection-反射" tabindex="-1">3.6 Reflection 反射 <a class="header-anchor" href="#_3-6-reflection-反射" aria-label="Permalink to &quot;3.6 Reflection 反射&quot;">​</a></h3><p>通过尝试检索属性并检查获得的值，可以轻松检查对象以确定其具有哪些属性。 <code>typeof</code> 运算符对于确定属性的类型非常有帮助：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> flight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    airline: </span><span style="color:#9ECBFF;">&quot;Oceanic&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    number: </span><span style="color:#79B8FF;">815</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    departure: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        IATA: </span><span style="color:#9ECBFF;">&quot;SYD&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        time: </span><span style="color:#9ECBFF;">&quot;2004-09-22 14:55&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        city: </span><span style="color:#9ECBFF;">&quot;Sydney&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    arrival: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        IATA: </span><span style="color:#9ECBFF;">&quot;LAX&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        time: </span><span style="color:#9ECBFF;">&quot;2004-09-23 10:42&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        city: </span><span style="color:#9ECBFF;">&quot;Los Angeles&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">flight.status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;overdue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> flight.number </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> flight.status </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> flight.arrival </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> flight.manifest </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> flight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    airline: </span><span style="color:#032F62;">&quot;Oceanic&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    number: </span><span style="color:#005CC5;">815</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    departure: {</span></span>
<span class="line"><span style="color:#24292E;">        IATA: </span><span style="color:#032F62;">&quot;SYD&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        time: </span><span style="color:#032F62;">&quot;2004-09-22 14:55&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        city: </span><span style="color:#032F62;">&quot;Sydney&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    arrival: {</span></span>
<span class="line"><span style="color:#24292E;">        IATA: </span><span style="color:#032F62;">&quot;LAX&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        time: </span><span style="color:#032F62;">&quot;2004-09-23 10:42&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        city: </span><span style="color:#032F62;">&quot;Los Angeles&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">flight.status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;overdue&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> flight.number </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> flight.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> flight.arrival </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> flight.manifest </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>必须小心，因为原型链上的任何属性都可以产生一个值：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> flight.toString </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> flight.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> flight.toString </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> flight.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>有两种方法可以处理这些不需要的属性。 第一个是让您的程序查找并拒绝函数值。 一般来说，当您反思时，您对数据感兴趣，因此您应该意识到某些值可能是函数。</p><p>另一种方法是使用 <code>hasOwnProperty</code> 方法，如果对象具有特定属性，该方法将返回 <code>true</code>。 <code>hasOwnProperty</code> 方法不查看原型链：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(flight.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">flight.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;constructor&#39;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(flight.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">flight.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;constructor&#39;</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,183),e=[o];function t(c,r,i,E,y,d){return n(),a("div",null,e)}const h=s(l,[["render",t]]);export{b as __pageData,h as default};
